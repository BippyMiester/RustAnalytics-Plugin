name: Release Automation

on:
  push:
    branches:
      - main
  # schedule:
  #   - cron: '0 0 * * *' # Example: Runs every day at midnight

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: pip install requests

    - name: Compare and Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        import requests
        import re
        import os

        # Function to extract version from RustAnalytics.cs
        def extract_version():
            with open('RustAnalytics.cs', 'r') as file:
                for line in file:
                    if '_PluginVersion' in line:
                        version = re.search(r'\"([\d.]+)\"', line)
                        if version:
                            return version.group(1)
            return None

        # Function to get the latest release version from GitHub API
        def get_latest_release(repo):
            url = f"https://api.github.com/repos/{repo}/releases/latest"
            response = requests.get(url)
            if response.status_code == 200:
                return response.json()['tag_name']
            return None

        # Function to create a new release
        def create_release(repo, version, token):
            url = f"https://api.github.com/repos/{repo}/releases"
            headers = {'Authorization': f'token {token}'}
            data = {
                'tag_name': version,
                'name': version,
                'body': f'Release of version {version}',
                'draft': False,
                'prerelease': False
            }
            response = requests.post(url, json=data, headers=headers)
            return response.status_code == 201

        # Main execution
        def main():
            repo = 'BippyMiester/RustAnalytics-Plugin'  # Replace with your repository
            token = os.environ['GITHUB_TOKEN']  # Ensure GITHUB_TOKEN is set in your secrets

            current_version = extract_version()
            latest_release = get_latest_release(repo)

            if current_version and latest_release and current_version > latest_release:
                if create_release(repo, current_version, token):
                    print("Release created successfully")
                else:
                    print("Failed to create release")
            else:
                print("No new release needed")

        if __name__ == "__main__":
            main()